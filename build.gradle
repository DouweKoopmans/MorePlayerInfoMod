buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext.config = parseConfig(file('build.properties'))

def version_mod = "${config.mod_version}.${config.patch}"

version = version_mod
group= "com.fallingdutchman.playerinfo" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

minecraft {
    version = "1.8.9-11.15.1.1722"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = true
}

jar {
    manifest {
        attributes 'ModSide':'CLIENT'
    }
    appendix = "${config.isSet('appendix') ? config.appendix : config.version_minecraft}"
}

sourceJar {
    appendix = "${config.isSet('appendix') ? config.appendix : config.version_minecraft}"
}

dependencies {}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand([
                'version'        : project.version,
                'mcversion'      : config.version_minecraft,
                'minforgeversion': config.isSet('version_minForge') ? config.version_minForge : config.version_forge
        ])
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

static def ConfigObject parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}